#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use IO::File;
use IO::Socket;
use Pod::Usage;

my $proto_version = 1;

Getopt::Long::Configure("no_auto_abbrev");

my %options;
my $opts_ok = GetOptions( \%options, 'help|?|h', 'man', 'secret|s=s',
    'non-interactive|n', 'port|p=s', 'address|a=s', 'chomp|c' );

pod2usage(2) if !$opts_ok;
pod2usage(1) if exists $options{help};
pod2usage( -exitstatus => 0, -verbose => 2 ) if exists $options{man};

my $config = load_config();

my $secret = $options{secret} ||= '';
my $address = $config->{client_address} || $options{address} || '127.0.0.1';
my $port    = $config->{port}           || $options{port}    || 12345;

my $data;
if ( scalar(@ARGV) ) {
    $data = join( ' ', @ARGV );
}
else {
    local $/ = undef;
    $data = <STDIN>;
}

# drop last newline if only one line (thanks merlyn)
if ( $options{'chomp'} ) {
    $data =~ s/^(.*)\n$/$1/;
}

send_copy_data( $data, $secret );

sub read_hello {
    my $sock = shift;

    my $line = <$sock>;
}

sub send_copy_data {
    my ( $data, $secret ) = @_;

    my $sock = IO::Socket::INET->new(
        Proto     => 'tcp',
        PeerAddr  => $address,
        PeerPort  => $port,
        ReuseAddr => 1,
    ) or die "Unable to connect: $!.\n";

    read_hello($sock);

    # send authentication
    printf $sock "%d:%s", $proto_version, $secret;

    my $line = <$sock>;
    if ( $line =~ /SUCCESS/ ) {

        # auth successful, send copy data
        print $sock $data;
    }
    elsif ( $line =~ /FAILURE AUTH/ ) {
        if ( $options{'non-interactive'} ) {
            print "Authentication failure.  Use -s to pass in secret.\n";
            exit 1;
        }
        else {
            my $tty = IO::File->new( '/dev/tty', 'r+' );

            print $tty "Input secret:\n";
            my $secret = <$tty>;
            chomp($secret);

            $tty->close();

            send_copy_data( $data, $secret );
        }
    }

    $sock->close();
}

# same method in server and client
sub load_config {
    my $config_filepath = "$ENV{HOME}/.remotecopyrc";

    my $config = {};
    if ( -e $config_filepath ) {
        open( my $config_file, '<', $config_filepath );
        while ( my $line = <$config_file> ) {
            chomp($line);
            my ( $key, $option ) = $line =~ m/([\w]+)\s*=\s*(.*)/;
            $config->{$key} = $option;
        }
        close($config_file);
    }

    return $config;
}

__END__

=head1 NAME

remotecopy - send remote copy request

=head1 SYNOPSIS

 remotecopy [options] [datatocopy]

 Options:
  -n --non-interactive      Don't prompt for secret if not found, communicate
                            with exit code.
  -s --secret <secret>      Remote copy secret, as provided by the server.
  -p --port <port>          Port to connect to (defaults to 12345).
  -a --address <ip addr>    IP address to connect to (defaults to 127.0.0.1).
  -c --chomp                Chomp the last newline, if only one exists.

 Documentation options:
  -h --help -?              brief help message
     --man                  full documentation

=head1 REQUIRED ARGUMENTS

No arguments are required.

=head1 DESCRIPTION

This script implements the remote end of a remote copy.  It connects to a
remotecopyserver and sends copy data (either from stdin or an argument) after
handshaking.

=head1 EXAMPLES

=head2 Copy a simple string.

After the secret is entered, the data is in the server's copy buffer.

 $ remotecopy foo
 Input secret:
 rc-b212f4522lle33a689edcca88d6845b8

=head2 Copy output of another program.

After the secret is entered, the data is in the server's copy buffer.

 $ ls | remotecopy
 Input secret:
 rc-b212f4522lle33a689edcca88d6845b8

=head2 Specify secret on command line

No prompt is needed

 $ ls | remotecopy -s rc-b212f4520c3e33a689edcca88d6845b8
 $

=head1 PROTOCOL

See the documentation for remotecopyserver.

=head1 RC

If a ~/.remotecopyrc file is present, it will be read for options.  The file
format is just keys and values, separated by an equals sign.  Example:

    client_address = 127.0.0.1
    port = 54321

remotecopy will use two keys:

=over 4

=item client_address - IP address to connect to.

=item port - Port to connect to.

=back

=head1 AUTHOR

Nate Jones E<lt>nate@endot.orgE<gt>

=head1 COPYRIGHT

Copyright (c) 2011 by Nate Jones E<lt>nate@endot.orgE<gt>.

This program is free software; you can use, modify, and redistribute it under
the Artistic License, version 2.0.

See http://www.opensource.org/licenses/artistic-license-2.0.php

=cut
